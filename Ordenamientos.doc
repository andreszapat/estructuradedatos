import java.util.Arrays;

public class Ordenamientos {

	public static void main(String[] args) {
		int[] array = {5, 2, 8, 3, 1, 6, 4};

		System.out.println("Array original: " + Arrays.toString(array));

		// Burbuja
		int[] arrayBurbuja = array.clone();
		burbuja(arrayBurbuja);
		System.out.println("Array ordenado con Burbuja: " + Arrays.toString(arrayBurbuja));

		// Quicksort
		int[] arrayQuicksort = array.clone();
		quicksort(arrayQuicksort, 0, arrayQuicksort.length - 1);
		System.out.println("Array ordenado con Quicksort: " + Arrays.toString(arrayQuicksort));

		// Mergesort
		int[] arrayMergesort = array.clone();
		mergesort(arrayMergesort);
		System.out.println("Array ordenado con Mergesort: " + Arrays.toString(arrayMergesort));

		// Counting Sort
		int[] arrayCountingSort = array.clone();
		countingSort(arrayCountingSort);
		System.out.println("Array ordenado con Counting Sort: " + Arrays.toString(arrayCountingSort));
	}

	// Burbuja
	public static void burbuja(int[] array) {
		int n = array.length;
		for (int i = 0; i < n - 1; i++) {
			for (int j = 0; j < n - i - 1; j++) {
				if (array[j] > array[j + 1]) {
					int temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
				}
			}
		}
	}

	// Quicksort
	public static void quicksort(int[] array, int low, int high) {
		if (low < high) {
			int pivot = partition(array, low, high);
			quicksort(array, low, pivot - 1);
			quicksort(array, pivot + 1, high);
		}
	}

	public static int partition(int[] array, int low, int high) {
		int pivot = array[high];
		int i = low - 1;
		for (int j = low; j < high; j++) {
			if (array[j] < pivot) {
				i++;
				int temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
		}
		int temp = array[i + 1];
		array[i + 1] = array[high];
		array[high] = temp;
		return i + 1;
	}

	// Mergesort
	public static void mergesort(int[] array) {
		if (array.length > 1) {
			int mid = array.length / 2;
			int[] left = Arrays.copyOfRange(array, 0, mid);
			int[] right = Arrays.copyOfRange(array, mid, array.length);
			mergesort(left);
			mergesort(right);
			merge(left, right, array);
		}
	}

	public static void merge(int[] left, int[] right, int[] array) {
		int i = 0, j = 0, k = 0;
		while (i < left.length && j < right.length) {
			if (left[i] < right[j]) {
				array[k++] = left[i++];
			} else {
				array[k++] = right[j++];
			}
		}
		while (i < left.length) {
			array[k++] = left[i++];
		}
		while (j < right.length) {
			array[k++] = right[j++];
		}
	}

	// Counting Sort
	public static void countingSort(int[] array) {
		int max = getMax(array);
		int[] count = new int[max + 1];
		for (int i = 0; i < array.length; i++) {
			count[array[i]]++;
		}
		int k = 0;
		for (int i = 0; i < count.length; i++) {
			while (count[i]-- > 0) {
				array[k++] = i;
			}
		}
	}

	public static int getMax(int[] array) {
		int max = array[0];
		for (int i = 1; i < array.length; i++) {
			if (array[i] > max) {
				max = array[i];
			}
		}
		return max;
	}
}
